{
  "_args": [
    [
      {
        "raw": "php-server-middleware@github:pqml/php-server-middleware",
        "scope": null,
        "escapedName": "php-server-middleware",
        "name": "php-server-middleware",
        "rawSpec": "github:pqml/php-server-middleware",
        "spec": "github:pqml/php-server-middleware",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:pqml/php-server-middleware.git",
          "sshUrl": "git+ssh://git@github.com/pqml/php-server-middleware.git",
          "httpsUrl": "git+https://github.com/pqml/php-server-middleware.git",
          "gitUrl": "git://github.com/pqml/php-server-middleware.git",
          "shortcut": "github:pqml/php-server-middleware",
          "directUrl": "https://raw.githubusercontent.com/pqml/php-server-middleware/master/package.json"
        }
      },
      "/Users/antoninlanglade/Dev/rework-totopack"
    ]
  ],
  "_from": "pqml/php-server-middleware",
  "_id": "php-server-middleware@0.7.2",
  "_inCache": true,
  "_location": "/php-server-middleware",
  "_phantomChildren": {},
  "_requested": {
    "raw": "php-server-middleware@github:pqml/php-server-middleware",
    "scope": null,
    "escapedName": "php-server-middleware",
    "name": "php-server-middleware",
    "rawSpec": "github:pqml/php-server-middleware",
    "spec": "github:pqml/php-server-middleware",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:pqml/php-server-middleware.git",
      "sshUrl": "git+ssh://git@github.com/pqml/php-server-middleware.git",
      "httpsUrl": "git+https://github.com/pqml/php-server-middleware.git",
      "gitUrl": "git://github.com/pqml/php-server-middleware.git",
      "shortcut": "github:pqml/php-server-middleware",
      "directUrl": "https://raw.githubusercontent.com/pqml/php-server-middleware/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git://github.com/pqml/php-server-middleware.git#7a1fa76f86d772c4cbe0228320e6b0282ccf4e3e",
  "_shasum": "c2fd47e5b290b517b115a205314309839862a89c",
  "_shrinkwrap": null,
  "_spec": "php-server-middleware@github:pqml/php-server-middleware",
  "_where": "/Users/antoninlanglade/Dev/rework-totopack",
  "author": {
    "name": "pqml"
  },
  "bugs": {
    "url": "https://github.com/pqml/php-server-middleware/issues"
  },
  "dependencies": {
    "@pqml/node-php-server": "^0.3.1",
    "http-proxy-middleware": "^0.17.4"
  },
  "description": "Simple php connect-like middleware using the php built-in server",
  "devDependencies": {
    "serve-static": "^1.12.4",
    "stacked": "^1.1.1"
  },
  "files": [
    "src",
    "index.js"
  ],
  "gitHead": "7a1fa76f86d772c4cbe0228320e6b0282ccf4e3e",
  "homepage": "https://github.com/pqml/php-server-middleware#readme",
  "keywords": [
    "php",
    "express",
    "server",
    "middleware"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "php-server-middleware",
  "optionalDependencies": {},
  "readme": "# php-middleware\nSimple php connect-like middleware using the php built-in server\n\n<br><br>\n\n:warning: __This is experimental and only tested on OSX__ :warning:\n\n<br><br>\n\n### Examples\n\n##### Usage with express\n```js\nconst express = require('express')\nconst phpMiddleware = require('php-server-middleware')\n\nconst app = express()\n\napp.use('/', phpMiddleware())\napp.listen(3000)\n\n```\n\n<br><br>\n\n### API Usage\n#### `const middleware = phpMiddleware([options])`\nReturn a connect-like middleware function and auto-start the php server used by the middleware.\n\n#### Options\n##### `host` (String)\n* Default: `'127.0.0.1'`\n* The host the php server will listen on\n* There is an issue between `node-proxy` and the built-in php server when php serves from `localhost`. To fix this, `localhost' will be proxy as `[::1]`. Note that it can break host/port rewriting in headers/body response.\n\n##### `port` (Number)\n* Default: `'35410'`\n* The base port to use for the php server\n\n##### `root` (String)\n* Default: `process.cwd()`\n* The document root of the php server\n\n##### `headersRewrite` (Boolean)\n* Default: `true`\n* Rewrites the location host/port on (301/302/307/308) redirects based on requested host/port.\n\n##### `bodyRewrite` (Boolean)\n* Default: `true`\n* Replace all `proxyHost:proxyPort` by `requestedHost:requestedPort` from the response body\n* Works only for these MIME-types:\n    - text/html\n    - text/css\n    - text/xml\n    - text/javascript\n    - application/javascript\n    - application/json\n\n##### `headers` (Object)\n* Default: `{}`\n* Adds request headers\n\n##### `handle404` (Boolean)\n* Default: `true`\n* Let php handle not-found filepaths\n\n##### `proxyOpts` (Object)\n* Default: `{}`\n* [http-proxy-middleware](https://www.npmjs.com/package/http-proxy-middleware) options\n\n##### `phpOpts` (Object)\n* Default: `{}`\n* [@pqml/node-php-server](https://github.com/pqml/node-php-server) options\n\n##### `verbose` (Boolean)\n* Default: `false`\n* Log additional informations\n\n##### `quiet` (Boolean)\n* Default: `false`\n* If true, don't write anything to the console\n\n##### `onStart` (Function)\n* Default: `function () {}`\n* The onStart function will be called when the php built-in server is ready.\n\n##### `bin` (String)\n* Default: `php`\n* Absolute Path / Alias to the php binary\n\n##### `promptBinary` (Boolean)\n* Default: `false`\n* If set to true and php isn't found, the middleware will ask the user a path/alias to a php binary\n* Be careful to not have other log during the middleware setup when using this. You can use the `onStart` options to wait for the middleware to be ready before logging anything else\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pqml/php-server-middleware.git"
  },
  "scripts": {},
  "version": "0.7.2"
}
